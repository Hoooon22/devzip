spring.application.name=devzip

# JPA 비활성화
# spring.autoconfigure.exclude=org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration

# X-Forwarded-For
server.tomcat.remote-ip-header=x-forwarded-for
server.tomcat.protocol-header=x-forwarded-proto
server.tomcat.internal-proxies=10\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|20\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|192\\.168\\.\\d{1,3}\\.\\d{1,3}|169\\.254\\.\\d{1,3}\\.\\d{1,3}|127\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}|172\\.1[6-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.2[0-9]{1}\\.\\d{1,3}\\.\\d{1,3}|172\\.3[0-1]{1}\\.\\d{1,3}\\.\\d{1,3}|0:0:0:0:0:0:0:1|::1
server.use-forward-headers=true

# debug level
# logging.level.org.springframework.web=DEBUG
# logging.level.org.springframework.security=DEBUG
# logging.level.root=DEBUG

# Error Page
server.error.include-message=always
server.error.include-binding-errors=always

# DB
spring.profiles.include=aws
spring.jpa.hibernate.ddl-auto=update
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect

# # Logging for SQL (개발환경에서만 활성화)
spring.jpa.show-sql=${SHOW_SQL:false}
spring.jpa.properties.hibernate.format_sql=${FORMAT_SQL:false}
spring.jpa.properties.hibernate.dialect.storage_engine=InnoDB
spring.jpa.database-platform=org.hibernate.dialect.MySQLDialect

# Hibernate 성능 최적화 설정
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.jdbc.fetch_size=20
spring.jpa.properties.hibernate.connection.pool_size=10
spring.jpa.properties.hibernate.c3p0.min_size=5
spring.jpa.properties.hibernate.c3p0.max_size=20
spring.jpa.properties.hibernate.c3p0.timeout=300
spring.jpa.properties.hibernate.c3p0.max_statements=50
spring.jpa.properties.hibernate.c3p0.idle_test_period=3000

# 쿼리 계획 캐시 설정
spring.jpa.properties.hibernate.query.plan_cache_max_size=2048
spring.jpa.properties.hibernate.query.plan_parameter_metadata_max_size=128

# 2차 캐시 비활성화 (Redis 별도 사용 예정)
spring.jpa.properties.hibernate.cache.use_second_level_cache=false
spring.jpa.properties.hibernate.cache.use_query_cache=false

# SpringBoot Actuator
# 모든 endpoint를 공개 (기본적으로 몇몇만 공개됨)
management.endpoints.web.exposure.include=*
# 애플리케이션의 메트릭 정보를 확인할 수 있는 경로
management.endpoint.health.show-details=always
management.endpoint.metrics.enabled=true
management.metrics.distribution.percentiles-histogram.cpu.usage=true

# # Build 최적화
org.gradle.daemon=true
# org.gradle.caching=true
# org.gradle.parallel=true
# org.gradle.configureondemand=true

# springboot security
spring.security.enabled=true

# Spring Security가 CSRF 토큰을 응답 쿠키에 포함하도록 설정
server.servlet.session.cookie.secure=true
server.servlet.session.cookie.http-only=false
server.servlet.session.cookie.same-site=strict

network.interface=enX0

# pixel-roguelike
spring.web.resources.add-mappings=true
spring.web.resources.static-locations=classpath:/static/

# TraceBoard - SPA 라우팅을 위한 설정
spring.mvc.throw-exception-if-no-handler-found=true
spring.web.resources.chain.strategy.content.enabled=true
spring.web.resources.chain.strategy.content.paths=/**

# server open
server.port=8080
server.address=0.0.0.0

# Security Settings
app.jwtSecret=${JWT_SECRET:MyVerySecureJWTSecretKey123456789012345678901234567890}
app.jwtExpirationInMs=${JWT_EXPIRATION:86400000}

# Data Encryption Settings
app.encryption.secret-key=${ENCRYPTION_SECRET:MySecretKey123456789012345678901234567890}
app.encryption.salt=${ENCRYPTION_SALT:TraceBoard2024Salt}

# CORS Settings
app.cors.allowed-origins=${CORS_ORIGINS:http://localhost:8080,http://localhost:3000}
app.cors.max-age=${CORS_MAX_AGE:3600}

# WebSocket Settings
app.websocket.allowed-origins=${WEBSOCKET_ORIGINS:http://localhost:8080,http://localhost:3000}

# Pagination Settings (메모리 보호를 위한 최대 조회 제한)
app.pagination.default-limit=${PAGINATION_DEFAULT:1000}
app.pagination.dashboard-limit=${PAGINATION_DASHBOARD:50000}
app.pagination.export-limit=${PAGINATION_EXPORT:100000}
app.pagination.user-limit=${PAGINATION_USER:2000}
app.pagination.type-limit=${PAGINATION_TYPE:5000}