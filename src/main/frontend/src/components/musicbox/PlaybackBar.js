import React, { useState, useEffect, useRef, useCallback } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';
import audioEngine from '../../utils/audioEngine';

/**
 * Ïû¨ÏÉù Î∞î Ïª¥Ìè¨ÎÑåÌä∏
 *
 * Ïù¥ Ïª¥Ìè¨ÎÑåÌä∏Îäî WebSocketÍ≥º ÏôÑÏ†ÑÌûà ÎèÖÎ¶ΩÏ†ÅÏúºÎ°ú ÏûëÎèôÌïòÎ©∞,
 * requestAnimationFrameÏùÑ ÏÇ¨Ïö©Ìï¥ Ïû¨ÏÉù Î∞îÎ•º Î∂ÄÎìúÎüΩÍ≤å ÏõÄÏßÅÏù¥Í≥†
 * Í∞Å ÏÖÄÏùÑ ÏßÄÎÇ† ÎïåÎßàÎã§ ÏÇ¨Ïö¥ÎìúÎ•º Ïû¨ÏÉùÌï©ÎãàÎã§.
 */
const PlaybackBar = ({ grid, gridWidth = 16 }) => {
    const [isPlaying, setIsPlaying] = useState(false);
    const [currentPosition, setCurrentPosition] = useState(0);
    const [bpm, setBpm] = useState(120); // Í∏∞Î≥∏ 120 BPM

    const animationFrameRef = useRef(null);
    const lastTimeRef = useRef(0);
    const positionRef = useRef(0);

    // BPMÏóê Îî∞Î•∏ Ìïú Ïπ∏Îãπ Ïù¥Îèô ÏãúÍ∞Ñ Í≥ÑÏÇ∞ (Î∞ÄÎ¶¨Ï¥à)
    const timePerStep = (60 / bpm) * 1000 / 4; // 16Î∂ÑÏùåÌëú Í∏∞Ï§Ä

    /**
     * ÌäπÏ†ï X Ï¢åÌëúÏùò ÌôúÏÑ±ÌôîÎêú ÎÖ∏Ìä∏ Ïû¨ÏÉù
     */
    const playNotesAtPosition = useCallback((x) => {
        if (!audioEngine.isInitialized()) {
            return;
        }

        const activeNotes = [];

        // Ìï¥Îãπ X Ï¢åÌëúÏùò Î™®Îì† YÎ•º Í≤ÄÏÇ¨
        for (let y = 0; y < grid.length; y++) {
            if (grid[y][x]) {
                activeNotes.push(y);
            }
        }

        // ÌôúÏÑ±ÌôîÎêú ÎÖ∏Ìä∏Í∞Ä ÏûàÏúºÎ©¥ Ïû¨ÏÉù
        if (activeNotes.length > 0) {
            audioEngine.playChord(activeNotes, 0.15);
            console.log(`üéµ Playing notes at x=${x}:`, activeNotes);
        }
    }, [grid]);

    /**
     * Ïû¨ÏÉù Î£®ÌîÑ
     */
    const animate = useCallback((timestamp) => {
        if (!lastTimeRef.current) {
            lastTimeRef.current = timestamp;
        }

        const deltaTime = timestamp - lastTimeRef.current;

        // Ï∂©Î∂ÑÌïú ÏãúÍ∞ÑÏù¥ Í≤ΩÍ≥ºÌñàÏúºÎ©¥ Îã§Ïùå Ïπ∏ÏúºÎ°ú Ïù¥Îèô
        if (deltaTime >= timePerStep) {
            const newPosition = (positionRef.current + 1) % gridWidth;
            positionRef.current = newPosition;

            // ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (UI Î†åÎçîÎßÅÏö©)
            setCurrentPosition(newPosition);

            // Ìï¥Îãπ ÏúÑÏπòÏùò ÎÖ∏Ìä∏ Ïû¨ÏÉù
            playNotesAtPosition(newPosition);

            lastTimeRef.current = timestamp;
        }

        // Îã§Ïùå ÌîÑÎ†àÏûÑ ÏòàÏïΩ
        animationFrameRef.current = requestAnimationFrame(animate);
    }, [timePerStep, gridWidth, playNotesAtPosition]);

    /**
     * Ïû¨ÏÉù/Ï†ïÏßÄ ÌÜ†Í∏Ä
     */
    const togglePlayback = async () => {
        if (!isPlaying) {
            // Ïû¨ÏÉù ÏãúÏûë

            // AudioEngine Ï¥àÍ∏∞Ìôî (Ï≤´ Ïû¨ÏÉù ÏãúÏóêÎßå)
            if (!audioEngine.isInitialized()) {
                await audioEngine.initialize();
            }

            setIsPlaying(true);
            lastTimeRef.current = 0;
            animationFrameRef.current = requestAnimationFrame(animate);

            console.log('‚ñ∂Ô∏è Ïû¨ÏÉù ÏãúÏûë');
        } else {
            // Ïû¨ÏÉù Ï†ïÏßÄ
            setIsPlaying(false);

            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
                animationFrameRef.current = null;
            }

            console.log('‚è∏Ô∏è Ïû¨ÏÉù ÏùºÏãúÏ†ïÏßÄ');
        }
    };

    /**
     * BPM Î≥ÄÍ≤Ω Ìï∏Îì§Îü¨
     */
    const handleBpmChange = (e) => {
        const newBpm = parseInt(e.target.value, 10);
        setBpm(newBpm);
        console.log(`üéº BPM changed to: ${newBpm}`);
    };

    /**
     * Ïª¥Ìè¨ÎÑåÌä∏ Ïñ∏ÎßàÏö¥Ìä∏ Ïãú Ïï†ÎãàÎ©îÏù¥ÏÖò Ï†ïÎ¶¨
     */
    useEffect(() => {
        return () => {
            if (animationFrameRef.current) {
                cancelAnimationFrame(animationFrameRef.current);
            }
        };
    }, []);

    return (
        <Container>
            <Controls>
                <PlayButton onClick={togglePlayback}>
                    {isPlaying ? '‚è∏Ô∏è ÏùºÏãúÏ†ïÏßÄ' : '‚ñ∂Ô∏è Ïû¨ÏÉù'}
                </PlayButton>

                <BpmControl>
                    <BpmLabel>BPM:</BpmLabel>
                    <BpmInput
                        type="number"
                        min="60"
                        max="240"
                        value={bpm}
                        onChange={handleBpmChange}
                        disabled={isPlaying}
                    />
                </BpmControl>

                <PositionIndicator>
                    ÏúÑÏπò: {currentPosition} / {gridWidth - 1}
                </PositionIndicator>
            </Controls>

            <ProgressBarContainer>
                <ProgressBar
                    style={{
                        width: `${((currentPosition + 1) / gridWidth) * 100}%`
                    }}
                />
            </ProgressBarContainer>
        </Container>
    );
};

PlaybackBar.propTypes = {
    grid: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.bool)).isRequired,
    gridWidth: PropTypes.number
};

export default PlaybackBar;

// Styled Components
const Container = styled.div`
    margin: 20px 0;
    padding: 20px;
    background-color: #f5f5f5;
    border-radius: 10px;
`;

const Controls = styled.div`
    display: flex;
    gap: 20px;
    align-items: center;
    margin-bottom: 15px;
`;

const PlayButton = styled.button`
    padding: 12px 30px;
    font-size: 1.1rem;
    background-color: #4CAF50;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-weight: bold;
    transition: background-color 0.3s, transform 0.1s;

    &:hover {
        background-color: #45a049;
        transform: scale(1.05);
    }

    &:active {
        transform: scale(0.98);
    }
`;

const BpmControl = styled.div`
    display: flex;
    align-items: center;
    gap: 10px;
`;

const BpmLabel = styled.span`
    font-size: 1rem;
    font-weight: bold;
    color: #333;
`;

const BpmInput = styled.input`
    width: 80px;
    padding: 8px;
    font-size: 1rem;
    border: 2px solid #ddd;
    border-radius: 5px;
    text-align: center;

    &:disabled {
        background-color: #e0e0e0;
        cursor: not-allowed;
    }
`;

const PositionIndicator = styled.div`
    font-size: 0.9rem;
    color: #666;
    margin-left: auto;
`;

const ProgressBarContainer = styled.div`
    width: 100%;
    height: 10px;
    background-color: #ddd;
    border-radius: 5px;
    overflow: hidden;
`;

const ProgressBar = styled.div`
    height: 100%;
    background: linear-gradient(90deg, #4CAF50, #8BC34A);
    transition: width 0.1s linear;
`;
