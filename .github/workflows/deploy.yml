name: DevZip CI/CD Pipeline

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: src/main/frontend/package-lock.json

    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Install Frontend Dependencies
      run: |
        cd src/main/frontend
        npm install --legacy-peer-deps

    - name: Frontend Build Test
      run: |
        cd src/main/frontend
        npm run build

    - name: Backend Compile Test
      run: ./gradlew compileJava

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/master' || github.event_name == 'pull_request'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      env:
        CI: false
      run: ./gradlew build -x test

  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.SERVER_HOST }}
        port: 3323
        username: ${{ secrets.SERVER_USERNAME }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        debug: true
        script: |
          cd ~/project/devzip
          echo "🚀 Starting deployment process..."
          
          # Git 설정 및 최신 코드 가져오기
          git config pull.rebase false
          git pull origin master
          
          # Gradle 빌드 및 Docker 작업 실행
          if [ $? -eq 0 ]; then
            echo "✅ Git pull successful, starting build..."
            # 실행 권한 부여
            chmod +x gradlew
            # Spring Boot 애플리케이션 빌드 (프론트엔드 포함)
            ./gradlew clean build -x test
            
            if [ $? -eq 0 ]; then
              echo "✅ Build successful, restarting services..."
              # Docker 재시작
              docker compose down
              docker compose build
              docker compose up -d
              echo "🎉 Deployment completed successfully!"
            else
              echo "❌ Build failed. Deployment stopped."
              exit 1
            fi
          else
            echo "❌ Git pull failed. Deployment stopped."
            exit 1
          fi

  health-check:
    name: Health Check & Status Verification
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
    - name: Wait for Application Startup
      run: |
        echo "⏳ Waiting for application to fully start..."
        sleep 60

    - name: Health Check - Basic Connectivity
      run: |
        echo "🏥 Running health checks..."
        
        # Check if server is responding
        response=$(curl -s -o /dev/null -w "%{http_code}" https://devzip.cloud/actuator/health || echo "000")
        
        if [ "$response" = "200" ]; then
          echo "✅ Health check endpoint: OK"
        else
          echo "❌ Health check endpoint failed (HTTP $response)"
        fi

    - name: Authentication System Check
      run: |
        echo "🔐 Testing JWT authentication system..."
        
        # Test login endpoint availability (should return proper error format, not 404)
        login_response=$(curl -s -o /dev/null -w "%{http_code}" -X POST https://devzip.cloud/api/auth/signin -H "Content-Type: application/json" -d '{"username":"test","password":"test"}' || echo "000")
        
        if [ "$login_response" = "403" ] || [ "$login_response" = "401" ] || [ "$login_response" = "400" ]; then
          echo "✅ Authentication endpoint: Responding properly"
        elif [ "$login_response" = "404" ]; then
          echo "❌ Authentication endpoint: Not found"
        else
          echo "⚠️ Authentication endpoint: Unexpected response ($login_response)"
        fi

    - name: Frontend Loading Check
      run: |
        echo "🌐 Testing frontend loading..."
        
        # Check main page
        main_response=$(curl -s -o /dev/null -w "%{http_code}" https://devzip.cloud/ || echo "000")
        
        if [ "$main_response" = "200" ]; then
          echo "✅ Main page: Loading successfully"
        else
          echo "❌ Main page: Failed to load (HTTP $main_response)"
        fi

    - name: Protected Routes Check
      run: |
        echo "🛡️ Testing protected routes..."
        
        # Test dashboard access (should redirect or show login)
        dashboard_response=$(curl -s -o /dev/null -w "%{http_code}" https://devzip.cloud/dashboard || echo "000")
        
        if [ "$dashboard_response" = "200" ] || [ "$dashboard_response" = "302" ] || [ "$dashboard_response" = "401" ]; then
          echo "✅ Dashboard protection: Working"
        else
          echo "⚠️ Dashboard protection: Unexpected response ($dashboard_response)"
        fi
        
        # Test traceboard access
        traceboard_response=$(curl -s -o /dev/null -w "%{http_code}" https://devzip.cloud/traceboard || echo "000")
        
        if [ "$traceboard_response" = "200" ] || [ "$traceboard_response" = "302" ] || [ "$traceboard_response" = "401" ]; then
          echo "✅ Traceboard protection: Working"
        else
          echo "⚠️ Traceboard protection: Unexpected response ($traceboard_response)"
        fi

    - name: Final Status Report
      run: |
        echo ""
        echo "📊 Deployment Status Summary:"
        echo "=========================================="
        echo "🎯 Application: DevZip"
        echo "🌐 URL: https://devzip.cloud"
        echo "🔐 Authentication: JWT-based admin system"
        echo "🛡️ Protected Routes: Dashboard, Traceboard"
        echo "⚡ Features: Real-time analytics, User tracking"
        echo ""
        echo "✅ Deployment completed successfully!"
        echo "🚀 All systems operational and ready for use!"
